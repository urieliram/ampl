$title Three-Bus Network DC-OPF

$onText
$offText

Sets bus /1*5/ , slack(bus) /1/ , gen / g1*g5/;
Scalars Sbase / 1 / ; 
Alias ( bus , node ) ;
Table GenData (gen , *)
   b    pmin    pmax
g1 6    0.15    0.60
g2 7    0.10    0.40 ;

set GBconect(bus ,gen) connectivity index of generating unit
/ 1 . g1
  2 . g2 / ;
  
Table BusData(bus,*) Demands of each bus in MW
  Pd
3 0.85;

set conex Bus connectivity matrix
/ 1 . 2
  2 . 3
  1 . 3/;
  
conex ( bus , node )$conex ( node , bus ) = 1;

Table branch ( bus , node , *)
       x       Limit
1 . 2  0.4000  0.3
2 . 3  0.3333  0.4
1 . 3  0.2857  0.5
2 . 1  0.4000  0.3
3 . 2  0.3333  0.4
3 . 1  0.2857  0.5;

branch(bus,node,'x')$(branch(bus,node,'x')=0)=branch(node,bus,'x');
branch(bus,node,'Limit')$(branch(bus,node,'Limit')=0)=branch(node,bus,'Limit');
branch(bus,node,'bij')$conex(bus,node)=1/branch(bus,node,'x');

Variables OF, Pij(bus,node),Pg(gen),delta(bus);

Equations const1 , const2 , const3 ;

const1(bus,node)$conex(bus,node) .. Pij(bus,node)=e=
                 branch(bus,node,'bij')*(delta(bus)-delta(node));

const2(bus) .. +sum(gen$GBconect(bus,gen),Pg(gen))-BusData(bus,'pd')/Sbase=e=
               +sum(node$conex(node,bus),Pij(bus,node));

const3 ..  OF=g=sum(gen,Pg(gen)*GenData(gen,'b')*Sbase) ;

Model loadflow / const1 , const2 , const3 / ;
Pg.lo (gen)=GenData(gen , 'Pmin' ) / Sbase ;
Pg.up (gen)=GenData(gen , 'Pmax' ) / Sbase ;

delta.up(bus)   =  pi;
delta.lo(bus)   = -pi;
delta.fx(slack) =   0;

Pij.up(bus,node)$((conex(bus,node)))=+1*branch(bus,node,'Limit')/Sbase;
Pij.lo(bus,node)$((conex(bus,node)))=-1*branch(bus,node,'Limit')/Sbase;

solve loadflow minimizing OF using lp;
parameter report( bus ,*), Congestioncost;

report(bus,'gen(MW)')= sum(gen$GBconect(bus,gen),Pg.l(gen)) * sbase;

report( bus , 'Angle' )     = delta.l (bus) ;
report( bus , 'load(MW)' )  = BusData (bus,'pd') ;
report( bus , 'LMP($/MWh)' )= const2.m(bus) / sbase ;
Congestioncost=sum((bus,node),Pij.l(bus,node)*(-const2.m(bus)+const2.m(node)))/2;
Display report , Pij.l , Congestioncost;